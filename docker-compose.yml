services:
  postgres:
    image: postgres:16-alpine
    container_name: rentalmanager-postgres
    environment:
      POSTGRES_DB: RentalManagerDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - rentalmanager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: rentalmanager-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - rentalmanager-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: rentalmanager-backend
    ports:
      - "5111:80"
    environment:
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=RentalManagerDb;Username=postgres;Password=password
      - Jwt__Key=DevJwtKeyForDocker2024RentalManagerAppSecureMin32Chars!
      - Jwt__Issuer=RentalManager.API
      - Jwt__Audience=RentalManager.API.Users
      - Stripe__SecretKey=sk_test_placeholder_replace_with_real_key_in_override
      - Stripe__PublishableKey=pk_test_your_stripe_publishable_key
      - Frontend__BaseUrl=http://localhost:3001
      - Elasticsearch__Url=http://elasticsearch:9200
      - Elasticsearch__DefaultIndex=rentalmanager-index
      - Kafka__BootstrapServers=kafka:29092
      - Kafka__GroupId=rentalmanager-api-group
      - OpenTelemetry__ServiceName=RentalManager.API
      - OpenTelemetry__ServiceVersion=1.0.0
      - OpenTelemetry__JaegerEndpoint=http://jaeger:14268/api/traces
      - OpenTelemetry__PrometheusEndpoint=http://prometheus:9090
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    networks:
      - rentalmanager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: rentalmanager-frontend
    ports:
      - "3001:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:5111/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - rentalmanager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: rentalmanager-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - rentalmanager-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: rentalmanager-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # KRaft mode configuration
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      # Listener configuration
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://:29092,CONTROLLER://:9093,PLAINTEXT_HOST://0.0.0.0:9092
      # Replication and transaction settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # Topic auto-creation
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # Metadata directory for KRaft
      KAFKA_METADATA_LOG_DIR: /var/lib/kafka/metadata
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - rentalmanager-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  prometheus:
    image: prom/prometheus:latest
    container_name: rentalmanager-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - rentalmanager-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana:latest
    container_name: rentalmanager-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - rentalmanager-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: rentalmanager-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - rentalmanager-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  rentalmanager-network:
    driver: bridge
