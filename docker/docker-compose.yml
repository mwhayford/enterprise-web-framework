version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rentalmanager-postgres
    environment:
      POSTGRES_DB: RentalManagerDb_Dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rentalmanager-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rentalmanager-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rentalmanager-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: rentalmanager-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rentalmanager-network

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: rentalmanager-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - rentalmanager-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: rentalmanager-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rentalmanager-network

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: rentalmanager-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=RentalManagerDb_Dev;Username=postgres;Password=password
      - Jwt__Key=YourSuperSecretKeyThatIsAtLeast32CharactersLong!
      - Jwt__Issuer=RentalManager.API
      - Jwt__Audience=RentalManager.API.Users
      - Google__ClientId=your-google-client-id
      - Google__ClientSecret=your-google-client-secret
      - Stripe__SecretKey=sk_test_your_stripe_secret_key
      - Stripe__PublishableKey=pk_test_your_stripe_publishable_key
    ports:
      - "7001:8080"
    volumes:
      - ../src/backend:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rentalmanager-network

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: rentalmanager-frontend
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=http://localhost:7001/api
      - VITE_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
    ports:
      - "3000:3000"
    volumes:
      - ../src/frontend:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rentalmanager-network

  # Adminer (Database Management)
  adminer:
    image: adminer:4.8.1
    container_name: rentalmanager-adminer
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    networks:
      - rentalmanager-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  kafka_data:

networks:
  rentalmanager-network:
    driver: bridge
