version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: core-postgres-ci
    environment:
      POSTGRES_DB: CoreDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    networks:
      - core-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: core-redis-ci
    ports:
      - "6380:6379"
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: core-elasticsearch-ci
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ports:
      - "9200:9200"
    networks:
      - core-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: core-zookeeper-ci
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: core-kafka-ci
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: core-backend-ci
    ports:
      - "5111:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=CoreDb;Username=postgres;Password=password
      - Redis__Configuration=redis:6379
      - Jwt__Key=YourSuperSecretKeyThatIsAtLeast32CharactersLong!
      - Jwt__Issuer=Core.API
      - Jwt__Audience=Core.API.Users
      - Google__ClientId=test-google-client-id
      - Google__ClientSecret=test-google-client-secret
      - StripeSettings__SecretKey=sk_test_dummy_key_for_ci
      - StripeSettings__PublishableKey=pk_test_dummy_key_for_ci
      - StripeSettings__WebhookSecret=whsec_dummy_webhook_secret_for_ci
      - Frontend__BaseUrl=http://localhost:3001
      - Elasticsearch__Url=http://elasticsearch:9200
      - Elasticsearch__DefaultIndex=core-index
      - Kafka__BootstrapServers=kafka:29092
      - Kafka__GroupId=core-api-group
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: core-frontend-ci
    ports:
      - "3001:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:5111/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  core-network:
    driver: bridge

