version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: core-postgres-ci
    environment:
      POSTGRES_DB: CoreDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    networks:
      - core-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: core-redis-ci
    ports:
      - "6380:6379"
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: core-backend-ci
    ports:
      - "5111:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=CoreDb;Username=postgres;Password=password
      - Redis__Configuration=redis:6379
      - Jwt__Key=YourSuperSecretKeyThatIsAtLeast32CharactersLong!
      - Jwt__Issuer=Core.API
      - Jwt__Audience=Core.API.Users
      - Google__ClientId=test-google-client-id
      - Google__ClientSecret=test-google-client-secret
      - StripeSettings__SecretKey=sk_test_dummy_key_for_ci
      - StripeSettings__PublishableKey=pk_test_dummy_key_for_ci
      - StripeSettings__WebhookSecret=whsec_dummy_webhook_secret_for_ci
      - Frontend__BaseUrl=http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: core-frontend-ci
    ports:
      - "3001:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:5111/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  core-network:
    driver: bridge

